using Toybox.WatchUi;

class FellrnrSimpleHrPwrView extends WatchUi.SimpleDataField {


	var weight;
	var ZeroPowerHR;
	var HrPwrSmoothing;
	var HrPwrDelay;

	var pwrField;
	var spwrField;
	var shrField;
	var shrpwrField;
	var cardiacCostField;


    var pwrdelay;
    var smoothhr=0;
    var smoothpwr=0;
    var smoothcount=0;
    var SmoothHrPwrCounter=0;


    // Set the label of the data field here.
    function initialize() {
        SimpleDataField.initialize();
        label = "HR-Pwr";

        var profile = UserProfile.getProfile();
        weight = profile.weight / 1000.0; //grams to Kg
        
		var mApp = Application.getApp();
        ZeroPowerHR = mApp.getProperty("ZeroPowerHR");
		HrPwrSmoothing = mApp.getProperty("HrPwrSmoothing").toFloat();
		HrPwrDelay = mApp.getProperty("HrPwrDelay");

/*
createField, since 1.3.0
*/

        pwrField = createField("Fellrnr_SHP_power", 0, FitContributor.DATA_TYPE_FLOAT, { :mesgType=>FitContributor.MESG_TYPE_RECORD } );
		spwrField  = createField("Fellrnr_SHP_smooth_power", 1, FitContributor.DATA_TYPE_FLOAT, { :mesgType=>FitContributor.MESG_TYPE_RECORD } );
		shrField = createField("Fellrnr_SHP_smooth_hr", 2, FitContributor.DATA_TYPE_FLOAT, { :mesgType=>FitContributor.MESG_TYPE_RECORD } );
		shrpwrField = createField("Fellrnr_SHP_hrpwr", 3, FitContributor.DATA_TYPE_FLOAT, { :mesgType=>FitContributor.MESG_TYPE_RECORD } );
		cardiacCostField = createField("Fellrnr_SHP_cardic_cost", 4, FitContributor.DATA_TYPE_FLOAT, { :mesgType=>FitContributor.MESG_TYPE_RECORD } );
        
        pwrField.setData(0.0);
		spwrField.setData(0.0);
		shrField.setData(0.0);
		shrpwrField.setData(0.0);
		cardiacCostField.setData(0.0);

    }

	var running=false;
    function onTimerStart() {
    	running=true;
	    pwrdelay = null;
    }

    function onTimerPause () {
	    pwrdelay = null;
	}	

    function onTimerResume() {
	    pwrdelay = null;
	}	

    function onTimerStop() {
	    pwrdelay = null;
	}	


    // The given info object contains all the current workout
    // information. Calculate a value and return it in this method.
    // Note that compute() and onUpdate() are asynchronous, and there is no
    // guarantee that compute() will be called before onUpdate().
    function compute(info) {

		//info.timerState is connect iq 2.1.0+
		if(!running) {
			return ZeroPowerHR + "/bpm " + weight.format("%.1f") + "/Kg";
		}


		if(info.currentHeartRate == 0 || info.currentHeartRate == null) {
			return "No HR";
		} 

/*
info.currentPower

Supported Devices:

All Edge devices
epix
D2 Bravo/Titanium
fenix 3/HR
fenix 5/S/X
fenix Chronos
Forerunner 735XT
Forerunner 920XT
Forerunner 935
*/

		if(info.currentPower == 0 || info.currentPower == null) {
			return "No Pwr";
		} 

		if(info.currentHeartRate <= ZeroPowerHR) {
			return "HR < 0pHR";
		}

		var hr = info.currentHeartRate;
		var pwr = info.currentPower;

		//cardiac cost
		var cc=0;
		if(info.currentSpeed != null && info.currentSpeed != 0) {
			var speedInKmMin = info.currentSpeed * 0.06; // *60 for min, /1000 for Km. 
			cc = (info.currentHeartRate / speedInKmMin) / 6000.0; //from Pacing Strategy Affects the Sub-Elite Marathoner’s Cardiac Drift and Performance|doi=10.3389/fpsyg.2019.03026

			cardiacCostField.setData(cc.toFloat());
		}

		
		if(pwrdelay == null) {
			pwrdelay = new [0];
//			for(var i=0; i < HrPwrDelay; i++) {
//				pwrdelay[i] =pwr.toFloat();
//			}
			smoothhr = hr.toFloat();
			smoothpwr = pwr.toFloat();
			SmoothHrPwrCounter=0;
		}

		pwrdelay.add(pwr);
		if(pwrdelay.size() > HrPwrDelay) {

			if(SmoothHrPwrCounter < HrPwrSmoothing) {
				SmoothHrPwrCounter++;
			}
	
			var delayedpwr = pwrdelay[0].toFloat();
			pwrdelay = pwrdelay.slice(1, null);
			
			smoothhr = (smoothhr*(SmoothHrPwrCounter-1.0)/SmoothHrPwrCounter) + hr.toFloat()/SmoothHrPwrCounter;
			smoothpwr = (smoothpwr*(SmoothHrPwrCounter-1.0)/SmoothHrPwrCounter) + delayedpwr/SmoothHrPwrCounter;
	
			var pwrMw = smoothpwr * 1000.0;
	        var pwkg = (pwrMw / weight);
	        var deltahr = (smoothhr - ZeroPowerHR);
	        var hrpw = pwkg / deltahr;
	        var hrpw1dp = Math.round(hrpw*10)/10.0;
		    var hrpwr = hrpw1dp;

			pwrField.setData(pwr.toFloat());
			spwrField.setData(smoothpwr.toFloat());
			shrField.setData(smoothhr.toFloat());
			shrpwrField.setData(hrpwr.toFloat());

			//System.println("HR " + hr + ", pwr " + info.currentPower + ", delay pwr " + delayedpwr + ", smoothhr " + smoothhr + ", hrpwr " + hrpwr + ", pwrMw: " + pwrMw + ", pwkg: " + pwkg + ", deltahr: " + deltahr + ", hrpw: " + hrpw);
	
			return hrpwr;
		} else {
			return "Pending data";
		}
		
		  



    }

}